import re

def extract_ascii_strings(data, min_length=4):
    pattern = rb"[ -~]{%d,}" % min_length  # Printable ASCII
    return [match.group().decode('ascii', errors='ignore') for match in re.finditer(pattern, data)]

# Extract strings from memory dump
with open("memdump.raw", "rb") as f:
    data = f.read()

strings = extract_ascii_strings(data)
print(f"Extracted {len(strings)} strings")

# Search for suspicious indicators
ioc_indicators = []
for s in strings:
    if re.match(r"\b\d{1,3}(\.\d{1,3}){3}\b", s):  # IP address
        ioc_indicators.append(("IP", s))
    elif ".onion" in s or s.endswith(".xyz") or s.endswith(".ru"):
        ioc_indicators.append(("Domain", s))
    elif "password" in s.lower() or "admin" in s.lower():
        ioc_indicators.append(("Keyword", s))

# Save found IOCs
with open("memory_iocs.txt", "w") as f_out:
    for type_, val in ioc_indicators:
        f_out.write(f"{type_}: {val}\n")
