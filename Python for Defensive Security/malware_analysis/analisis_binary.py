#!/usr/bin/env python3

import os
import sys
import json
import math
import logging
import argparse
import pefile
import struct
from datetime import datetime
from pathlib import Path
from collections import defaultdict
#pip install pefile

# Konfigurasi logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('analisis_binary.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

class BinaryAnalyzer:
    def __init__(self, file_path):
        self.file_path = Path(file_path)
        self.pe = None
        self.suspicious_blocks = []
        self.nop_sleds = []
        self.section_entropies = {}
        
    def load_pe_file(self):
        """Load dan parse file PE"""
        try:
            self.pe = pefile.PE(self.file_path)
            logging.info(f"Successfully loaded PE file: {self.file_path}")
            return True
        except Exception as e:
            logging.error(f"Error loading PE file: {str(e)}")
            return False

    def calculate_entropy(self, data):
        """Hitung entropy dari data"""
        if not data:
            return 0
            
        entropy = 0
        for x in range(256):
            p_x = data.count(bytes([x])) / len(data)
            if p_x > 0:
                entropy += -p_x * math.log2(p_x)
        return entropy

    def find_nop_sleds(self, min_length=16):
        """Cari NOP sleds dalam file"""
        try:
            with open(self.file_path, 'rb') as f:
                content = f.read()
                
            # Pattern untuk NOP sleds
            nop_patterns = [
                b'\x90' * min_length,  # x86 NOP
                b'\x0F\x1F\x00' * (min_length // 3),  # x64 NOP
                b'\x66\x90' * (min_length // 2)  # x86-64 NOP
            ]
            
            for pattern in nop_patterns:
                offset = 0
                while True:
                    offset = content.find(pattern, offset)
                    if offset == -1:
                        break
                        
                    # Ambil konteks sekitar NOP sled
                    start = max(0, offset - 32)
                    end = min(len(content), offset + len(pattern) + 32)
                    context = content[start:end]
                    
                    self.nop_sleds.append({
                        'offset': offset,
                        'length': len(pattern),
                        'pattern': pattern.hex(),
                        'context': context.hex()
                    })
                    
                    offset += 1
                    
            logging.info(f"Found {len(self.nop_sleds)} NOP sleds")
            
        except Exception as e:
            logging.error(f"Error finding NOP sleds: {str(e)}")

    def analyze_sections(self):
        """Analisis section PE dan hitung entropy"""
        if not self.pe:
            return
            
        for section in self.pe.sections:
            try:
                # Hitung entropy
                entropy = self.calculate_entropy(section.get_data())
                
                # Cek karakteristik mencurigakan
                is_suspicious = (
                    entropy > 7.0 or  # Entropy tinggi
                    section.SizeOfRawData == 0 or  # Section kosong
                    section.Characteristics & 0xE0000000 == 0xE0000000  # Executable, readable, writable
                )
                
                self.section_entropies[section.Name.decode().rstrip('\x00')] = {
                    'entropy': entropy,
                    'virtual_address': section.VirtualAddress,
                    'virtual_size': section.Misc_VirtualSize,
                    'raw_size': section.SizeOfRawData,
                    'characteristics': section.Characteristics,
                    'is_suspicious': is_suspicious
                }
                
                # Jika mencurigakan, simpan data section
                if is_suspicious:
                    self.suspicious_blocks.append({
                        'section': section.Name.decode().rstrip('\x00'),
                        'offset': section.PointerToRawData,
                        'size': section.SizeOfRawData,
                        'entropy': entropy,
                        'data': section.get_data().hex()
                    })
                    
            except Exception as e:
                logging.error(f"Error analyzing section {section.Name}: {str(e)}")

    def save_results(self, output_dir):
        """Simpan hasil analisis"""
        try:
            output_dir = Path(output_dir)
            output_dir.mkdir(parents=True, exist_ok=True)
            
            # Simpan JSON report
            report = {
                'timestamp': datetime.now().isoformat(),
                'file': str(self.file_path),
                'file_size': self.file_path.stat().st_size,
                'sections': self.section_entropies,
                'nop_sleds': self.nop_sleds,
                'suspicious_blocks': self.suspicious_blocks
            }
            
            with open(output_dir / 'binary_analysis.json', 'w') as f:
                json.dump(report, f, indent=2)
                
            # Simpan binary dumps
            for i, block in enumerate(self.suspicious_blocks):
                dump_path = output_dir / f'suspicious_block_{i}.bin'
                with open(dump_path, 'wb') as f:
                    f.write(bytes.fromhex(block['data']))
                    
            logging.info(f"Results saved to: {output_dir}")
            
        except Exception as e:
            logging.error(f"Error saving results: {str(e)}")

    def analyze(self, output_dir):
        """Jalankan analisis lengkap"""
        if not self.load_pe_file():
            return False
            
        self.find_nop_sleds()
        self.analyze_sections()
        self.save_results(output_dir)
        
        # Tampilkan ringkasan
        logging.info(f"Analysis complete:")
        logging.info(f"- Found {len(self.nop_sleds)} NOP sleds")
        logging.info(f"- Analyzed {len(self.section_entropies)} sections")
        logging.info(f"- Found {len(self.suspicious_blocks)} suspicious blocks")
        
        return True

def main():
    parser = argparse.ArgumentParser(description='Binary File Analysis')
    parser.add_argument('file', help='Path to the binary file')
    parser.add_argument('-o', '--output', help='Output directory', default='binary_analysis')
    
    args = parser.parse_args()

    try:
        analyzer = BinaryAnalyzer(args.file)
        if not analyzer.analyze(args.output):
            sys.exit(1)
            
    except Exception as e:
        logging.error(f"Analysis failed: {str(e)}")
        sys.exit(1)

if __name__ == '__main__':
    main() 

#python analisis_binary.py path/to/sample.exe -o analysis_results