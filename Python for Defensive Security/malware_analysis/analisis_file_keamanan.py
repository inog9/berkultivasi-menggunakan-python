#!/usr/bin/env python3
#pip install python-magic

import os
import json
import logging
import argparse
import magic
import math
import re
from collections import Counter
from datetime import datetime
from pathlib import Path
import sys

# Konfigurasi logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('analisis_file.log'),
        logging.StreamHandler()
    ]
)

class AnalisisFileKeamanan:
    def __init__(self):
        # Pola untuk indikator mencurigakan
        self.pola_mencurigakan = {
            'ip': re.compile(r'\b(?:\d{1,3}\.){3}\d{1,3}\b'),
            'url': re.compile(r'https?://[^\s<>"]+|www\.[^\s<>"]+'),
            'email': re.compile(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'),
            'cmd': re.compile(r'(?i)(cmd\.exe|powershell|wscript|vbs|bat|ps1)'),
            'suspicious_strings': [
                'malware', 'trojan', 'backdoor', 'exploit',
                'shellcode', 'payload', 'inject', 'bypass',
                'admin', 'root', 'system32', 'temp'
            ]
        }
        
        # Inisialisasi magic untuk deteksi file
        self.magic = magic.Magic(mime=True)

    def deteksi_format_file(self, file_path):
        """Deteksi format file menggunakan magic numbers."""
        try:
            mime_type = self.magic.from_file(file_path)
            file_stats = os.stat(file_path)
            
            return {
                'mime_type': mime_type,
                'ukuran': file_stats.st_size,
                'tanggal_modifikasi': datetime.fromtimestamp(file_stats.st_mtime).isoformat(),
                'ekstensi': os.path.splitext(file_path)[1].lower()
            }
        except Exception as e:
            logging.error(f"Error deteksi format file: {str(e)}")
            return None

    def ekstrak_string(self, file_path):
        """Ekstrak string ASCII dan Unicode dari file."""
        try:
            strings_ascii = set()
            strings_unicode = set()
            
            with open(file_path, 'rb') as f:
                content = f.read()
                
                # Ekstrak string ASCII (3 karakter atau lebih)
                ascii_pattern = re.compile(b'[\x20-\x7E]{3,}')
                for match in ascii_pattern.finditer(content):
                    strings_ascii.add(match.group().decode('ascii', errors='ignore'))
                
                # Ekstrak string Unicode
                unicode_pattern = re.compile(b'[\x20-\x7E\x80-\xFF]{3,}')
                for match in unicode_pattern.finditer(content):
                    try:
                        strings_unicode.add(match.group().decode('utf-8', errors='ignore'))
                    except UnicodeDecodeError:
                        continue
            
            return {
                'ascii': list(strings_ascii),
                'unicode': list(strings_unicode)
            }
        except Exception as e:
            logging.error(f"Error ekstrak string: {str(e)}")
            return None

    def hitung_entropi(self, file_path):
        """Hitung entropi file."""
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
                
            # Hitung frekuensi byte
            frekuensi = Counter(content)
            total_bytes = len(content)
            
            # Hitung entropi
            entropi = 0
            for count in frekuensi.values():
                probabilitas = count / total_bytes
                entropi -= probabilitas * math.log2(probabilitas)
            
            return {
                'entropi': entropi,
                'interpretasi': self._interpretasi_entropi(entropi)
            }
        except Exception as e:
            logging.error(f"Error hitung entropi: {str(e)}")
            return None

    def _interpretasi_entropi(self, entropi):
        """Interpretasi nilai entropi."""
        if entropi < 4.5:
            return "Kemungkinan file terkompresi atau terenkripsi"
        elif entropi < 6.0:
            return "Kemungkinan file teks atau data terstruktur"
        else:
            return "Kemungkinan file terenkripsi atau terkompresi"

    def cek_indikator_mencurigakan(self, strings):
        """Cek indikator mencurigakan dalam string."""
        indikator = {
            'ip': [],
            'url': [],
            'email': [],
            'cmd': [],
            'suspicious_strings': []
        }
        
        for string in strings:
            # Cek IP
            for match in self.pola_mencurigakan['ip'].finditer(string):
                indikator['ip'].append(match.group())
            
            # Cek URL
            for match in self.pola_mencurigakan['url'].finditer(string):
                indikator['url'].append(match.group())
            
            # Cek Email
            for match in self.pola_mencurigakan['email'].finditer(string):
                indikator['email'].append(match.group())
            
            # Cek Command
            for match in self.pola_mencurigakan['cmd'].finditer(string):
                indikator['cmd'].append(match.group())
            
            # Cek String Mencurigakan
            for suspicious in self.pola_mencurigakan['suspicious_strings']:
                if suspicious.lower() in string.lower():
                    indikator['suspicious_strings'].append(string)
        
        return indikator

    def simpan_string(self, strings, output_file):
        """Simpan string ke file teks."""
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write("=== String ASCII ===\n")
                for string in sorted(strings['ascii']):
                    f.write(f"{string}\n")
                
                f.write("\n=== String Unicode ===\n")
                for string in sorted(strings['unicode']):
                    f.write(f"{string}\n")
            
            logging.info(f"String disimpan ke {output_file}")
        except Exception as e:
            logging.error(f"Error menyimpan string: {str(e)}")
            raise

    def analisis_file(self, file_path):
        """Lakukan analisis lengkap pada file."""
        try:
            # Deteksi format
            format_info = self.deteksi_format_file(file_path)
            if not format_info:
                return None
            
            # Ekstrak string
            strings = self.ekstrak_string(file_path)
            if not strings:
                return None
            
            # Hitung entropi
            entropi_info = self.hitung_entropi(file_path)
            if not entropi_info:
                return None
            
            # Cek indikator mencurigakan
            indikator = self.cek_indikator_mencurigakan(strings['ascii'] + strings['unicode'])
            
            # Buat laporan
            laporan = {
                'timestamp_analisis': datetime.now().isoformat(),
                'file_info': format_info,
                'entropi': entropi_info,
                'indikator_mencurigakan': indikator,
                'ringkasan': {
                    'total_string_ascii': len(strings['ascii']),
                    'total_string_unicode': len(strings['unicode']),
                    'total_ip': len(indikator['ip']),
                    'total_url': len(indikator['url']),
                    'total_email': len(indikator['email']),
                    'total_cmd': len(indikator['cmd']),
                    'total_suspicious': len(indikator['suspicious_strings'])
                }
            }
            
            return laporan
            
        except Exception as e:
            logging.error(f"Error analisis file: {str(e)}")
            return None

def main():
    parser = argparse.ArgumentParser(description='Analisis Keamanan File')
    parser.add_argument('file_path', help='Path ke file yang akan dianalisis')
    parser.add_argument('--output', default='hasil_analisis.json',
                      help='File output JSON (default: hasil_analisis.json)')
    parser.add_argument('--strings-output', default='extracted_strings.txt',
                      help='File output untuk string (default: extracted_strings.txt)')
    
    args = parser.parse_args()
    
    if not Path(args.file_path).exists():
        logging.error(f"File tidak ditemukan: {args.file_path}")
        sys.exit(1)
    
    try:
        analyzer = AnalisisFileKeamanan()
        
        # Analisis file
        laporan = analyzer.analisis_file(args.file_path)
        if not laporan:
            sys.exit(1)
        
        # Simpan string
        strings = analyzer.ekstrak_string(args.file_path)
        analyzer.simpan_string(strings, args.strings_output)
        
        # Simpan laporan JSON
        with open(args.output, 'w') as f:
            json.dump(laporan, f, indent=4)
        
        # Tampilkan ringkasan
        print("\nRingkasan Analisis:")
        print("=" * 50)
        print(f"File: {args.file_path}")
        print(f"Format: {laporan['file_info']['mime_type']}")
        print(f"Ukuran: {laporan['file_info']['ukuran']} bytes")
        print(f"Entropi: {laporan['entropi']['entropi']:.2f}")
        print(f"Interpretasi: {laporan['entropi']['interpretasi']}")
        print("\nIndikator Mencurigakan:")
        print(f"- IP: {laporan['ringkasan']['total_ip']}")
        print(f"- URL: {laporan['ringkasan']['total_url']}")
        print(f"- Email: {laporan['ringkasan']['total_email']}")
        print(f"- Command: {laporan['ringkasan']['total_cmd']}")
        print(f"- String Mencurigakan: {laporan['ringkasan']['total_suspicious']}")
        
    except Exception as e:
        logging.error(f"Analisis gagal: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 


#python analisis_file_keamanan.py /path/to/file --output hasil.json --strings-output strings.txt