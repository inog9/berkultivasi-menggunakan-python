#!/usr/bin/env python3

import os
import json
import hashlib
import logging
import argparse
import requests
import csv
from datetime import datetime
from pathlib import Path
import time
import sys

# Konfigurasi logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('analisis_hash.log'),
        logging.StreamHandler()
    ]
)

class AnalisisHashFile:
    def __init__(self, api_key):
        self.api_key = api_key
        self.vt_base_url = "https://www.virustotal.com/vtapi/v2"
        self.rate_limit = 4  # requests per minute
        self.last_request = 0

    def _hitung_hash(self, file_path):
        """Hitung MD5, SHA1, dan SHA256 untuk file."""
        try:
            md5_hash = hashlib.md5()
            sha1_hash = hashlib.sha1()
            sha256_hash = hashlib.sha256()

            with open(file_path, "rb") as f:
                # Baca file dalam chunks untuk menghemat memori
                for byte_block in iter(lambda: f.read(4096), b""):
                    md5_hash.update(byte_block)
                    sha1_hash.update(byte_block)
                    sha256_hash.update(byte_block)

            return {
                'md5': md5_hash.hexdigest(),
                'sha1': sha1_hash.hexdigest(),
                'sha256': sha256_hash.hexdigest()
            }
        except Exception as e:
            logging.error(f"Error menghitung hash untuk {file_path}: {str(e)}")
            return None

    def _cek_rate_limit(self):
        """Implementasi rate limiting untuk VirusTotal API."""
        current_time = time.time()
        time_since_last = current_time - self.last_request
        
        if time_since_last < (60 / self.rate_limit):
            sleep_time = (60 / self.rate_limit) - time_since_last
            logging.info(f"Rate limit tercapai, menunggu {sleep_time:.2f} detik")
            time.sleep(sleep_time)
        
        self.last_request = time.time()

    def _cek_virustotal(self, file_hash):
        """Cek hash di VirusTotal."""
        try:
            self._cek_rate_limit()
            
            params = {'apikey': self.api_key, 'resource': file_hash}
            response = requests.get(f"{self.vt_base_url}/file/report", params=params)
            response.raise_for_status()
            
            result = response.json()
            return {
                'known_malware': result.get('positives', 0) > 0,
                'detections': result.get('positives', 0),
                'total_scanners': result.get('total', 0),
                'scan_date': result.get('scan_date'),
                'permalink': result.get('permalink')
            }
        except Exception as e:
            logging.error(f"Error querying VirusTotal: {str(e)}")
            return None

    def analisis_file(self, file_path):
        """Analisis satu file."""
        try:
            file_stats = os.stat(file_path)
            hashes = self._hitung_hash(file_path)
            
            if not hashes:
                return None

            vt_result = self._cek_virustotal(hashes['sha256'])
            
            return {
                'nama_file': os.path.basename(file_path),
                'path': file_path,
                'ukuran': file_stats.st_size,
                'tanggal_modifikasi': datetime.fromtimestamp(file_stats.st_mtime).isoformat(),
                'hash': hashes,
                'virustotal': vt_result
            }
        except Exception as e:
            logging.error(f"Error menganalisis file {file_path}: {str(e)}")
            return None

    def analisis_folder(self, folder_path):
        """Analisis semua file dalam folder."""
        results = []
        
        for root, _, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                result = self.analisis_file(file_path)
                if result:
                    results.append(result)
        
        return results

    def ekspor_json(self, results, output_file):
        """Ekspor hasil ke file JSON."""
        try:
            with open(output_file, 'w') as f:
                json.dump({
                    'timestamp_analisis': datetime.now().isoformat(),
                    'total_file': len(results),
                    'hasil': results
                }, f, indent=4)
            logging.info(f"Hasil diekspor ke {output_file}")
        except Exception as e:
            logging.error(f"Error mengekspor ke JSON: {str(e)}")
            raise

    def ekspor_csv(self, results, output_file):
        """Ekspor hasil ke file CSV."""
        try:
            with open(output_file, 'w', newline='') as f:
                writer = csv.writer(f)
                # Header
                writer.writerow([
                    'Nama File', 'Path', 'Ukuran', 'Tanggal Modifikasi',
                    'MD5', 'SHA1', 'SHA256',
                    'Known Malware', 'Detections', 'Total Scanners',
                    'Scan Date', 'Permalink'
                ])
                
                # Data
                for result in results:
                    writer.writerow([
                        result['nama_file'],
                        result['path'],
                        result['ukuran'],
                        result['tanggal_modifikasi'],
                        result['hash']['md5'],
                        result['hash']['sha1'],
                        result['hash']['sha256'],
                        result['virustotal']['known_malware'],
                        result['virustotal']['detections'],
                        result['virustotal']['total_scanners'],
                        result['virustotal']['scan_date'],
                        result['virustotal']['permalink']
                    ])
            logging.info(f"Hasil diekspor ke {output_file}")
        except Exception as e:
            logging.error(f"Error mengekspor ke CSV: {str(e)}")
            raise

def main():
    parser = argparse.ArgumentParser(description='Analisis Hash File dengan VirusTotal')
    parser.add_argument('path', help='Path ke file atau folder yang akan dianalisis')
    parser.add_argument('--api-key', required=True, help='VirusTotal API key')
    parser.add_argument('--output', default='hasil_analisis.json',
                      help='File output (default: hasil_analisis.json)')
    parser.add_argument('--format', choices=['json', 'csv'], default='json',
                      help='Format output (default: json)')
    
    args = parser.parse_args()
    
    if not Path(args.path).exists():
        logging.error(f"Path tidak ditemukan: {args.path}")
        sys.exit(1)
    
    try:
        analyzer = AnalisisHashFile(args.api_key)
        
        if os.path.isfile(args.path):
            results = [analyzer.analisis_file(args.path)]
        else:
            results = analyzer.analisis_folder(args.path)
        
        if args.format == 'json':
            analyzer.ekspor_json(results, args.output)
        else:
            analyzer.ekspor_csv(results, args.output)
        
        # Tampilkan ringkasan
        print("\nRingkasan Analisis:")
        print("=" * 50)
        print(f"Total File: {len(results)}")
        malware_count = sum(1 for r in results if r['virustotal']['known_malware'])
        print(f"File Terdeteksi Malware: {malware_count}")
        
    except Exception as e:
        logging.error(f"Analisis gagal: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 

# python analisis_hash_file.py /path/to/file --api-key YOUR_VT_API_KEY --format json