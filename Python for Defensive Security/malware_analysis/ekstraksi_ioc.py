#!/usr/bin/env python3

import os
import re
import json
import csv
import logging
import argparse
import base64
import hashlib
from datetime import datetime
from pathlib import Path
import sys
from urllib.parse import urlparse
import ipaddress

# Konfigurasi logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ekstraksi_ioc.log'),
        logging.StreamHandler()
    ]
)

class EkstraksiIOC:
    def __init__(self):
        # Pola regex untuk berbagai jenis IOC
        self.pola = {
            'ip': re.compile(r'\b(?:\d{1,3}\.){3}\d{1,3}\b'),
            'domain': re.compile(r'(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}'),
            'url': re.compile(r'https?://[^\s<>"]+|www\.[^\s<>"]+'),
            'md5': re.compile(r'\b[a-fA-F0-9]{32}\b'),
            'sha1': re.compile(r'\b[a-fA-F0-9]{40}\b'),
            'sha256': re.compile(r'\b[a-fA-F0-9]{64}\b'),
            'base64': re.compile(r'[A-Za-z0-9+/]{32,}={0,2}')
        }
        
        # Inisialisasi hasil
        self.hasil = {
            'ip': set(),
            'domain': set(),
            'url': set(),
            'md5': set(),
            'sha1': set(),
            'sha256': set(),
            'base64_decoded': set()
        }

    def _validasi_ip(self, ip):
        """Validasi format IP address."""
        try:
            ipaddress.ip_address(ip)
            return True
        except ValueError:
            return False

    def _validasi_domain(self, domain):
        """Validasi format domain."""
        # Hapus protokol dan path jika ada
        domain = domain.split('://')[-1].split('/')[0]
        # Hapus port jika ada
        domain = domain.split(':')[0]
        return bool(re.match(r'^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z]{2,})+$', domain))

    def _decode_base64(self, encoded_str):
        """Decode string base64 dengan error handling."""
        try:
            # Tambahkan padding jika diperlukan
            padding = 4 - (len(encoded_str) % 4)
            if padding != 4:
                encoded_str += '=' * padding
            
            decoded = base64.b64decode(encoded_str).decode('utf-8', errors='ignore')
            # Cek apakah hasil decode mengandung karakter yang valid
            if any(c.isprintable() for c in decoded):
                return decoded
        except Exception:
            pass
        return None

    def _ekstrak_ioc_dari_string(self, content):
        """Ekstrak IOC dari string content."""
        # Ekstrak IP
        for match in self.pola['ip'].finditer(content):
            ip = match.group()
            if self._validasi_ip(ip):
                self.hasil['ip'].add(ip)

        # Ekstrak domain
        for match in self.pola['domain'].finditer(content):
            domain = match.group()
            if self._validasi_domain(domain):
                self.hasil['domain'].add(domain)

        # Ekstrak URL
        for match in self.pola['url'].finditer(content):
            url = match.group()
            self.hasil['url'].add(url)

        # Ekstrak hash
        for match in self.pola['md5'].finditer(content):
            self.hasil['md5'].add(match.group())
        for match in self.pola['sha1'].finditer(content):
            self.hasil['sha1'].add(match.group())
        for match in self.pola['sha256'].finditer(content):
            self.hasil['sha256'].add(match.group())

        # Ekstrak dan decode base64
        for match in self.pola['base64'].finditer(content):
            encoded = match.group()
            decoded = self._decode_base64(encoded)
            if decoded:
                self.hasil['base64_decoded'].add(decoded)

    def analisis_file(self, file_path):
        """Analisis file untuk ekstraksi IOC."""
        try:
            # Baca file dalam mode binary
            with open(file_path, 'rb') as f:
                content = f.read()
            
            # Coba decode sebagai text
            try:
                text_content = content.decode('utf-8', errors='ignore')
            except UnicodeDecodeError:
                text_content = content.decode('latin-1', errors='ignore')
            
            # Ekstrak IOC
            self._ekstrak_ioc_dari_string(text_content)
            
            # Jika file binary, coba ekstrak string
            if b'\x00' in content:
                # Ekstrak string ASCII (3 karakter atau lebih)
                ascii_strings = re.findall(b'[\x20-\x7E]{3,}', content)
                for string in ascii_strings:
                    self._ekstrak_ioc_dari_string(string.decode('ascii', errors='ignore'))
            
            return True
            
        except Exception as e:
            logging.error(f"Error analisis file {file_path}: {str(e)}")
            return False

    def cari_kecocokan(self, file_path):
        """Cari kecocokan IOC dalam file lain."""
        try:
            with open(file_path, 'rb') as f:
                content = f.read().decode('utf-8', errors='ignore')
            
            kecocokan = {
                'ip': [],
                'domain': [],
                'url': [],
                'md5': [],
                'sha1': [],
                'sha256': [],
                'base64_decoded': []
            }
            
            # Cari kecocokan untuk setiap jenis IOC
            for ioc_type, ioc_set in self.hasil.items():
                for ioc in ioc_set:
                    if ioc in content:
                        kecocokan[ioc_type].append(ioc)
            
            return kecocokan
            
        except Exception as e:
            logging.error(f"Error mencari kecocokan di {file_path}: {str(e)}")
            return None

    def simpan_hasil(self, output_json, output_csv):
        """Simpan hasil ke file JSON dan CSV."""
        try:
            # Konversi set ke list untuk serialisasi
            hasil_dict = {k: list(v) for k, v in self.hasil.items()}
            
            # Simpan ke JSON
            with open(output_json, 'w') as f:
                json.dump({
                    'timestamp': datetime.now().isoformat(),
                    'hasil': hasil_dict
                }, f, indent=4)
            
            # Simpan ke CSV
            with open(output_csv, 'w', newline='') as f:
                writer = csv.writer(f)
                writer.writerow(['Jenis', 'Nilai'])
                for jenis, nilai_list in hasil_dict.items():
                    for nilai in nilai_list:
                        writer.writerow([jenis, nilai])
            
            logging.info(f"Hasil disimpan ke {output_json} dan {output_csv}")
            
        except Exception as e:
            logging.error(f"Error menyimpan hasil: {str(e)}")
            raise

def main():
    parser = argparse.ArgumentParser(description='Ekstraksi IOC dari File')
    parser.add_argument('file_path', help='Path ke file yang akan dianalisis')
    parser.add_argument('--output-json', default='hasil_ioc.json',
                      help='File output JSON (default: hasil_ioc.json)')
    parser.add_argument('--output-csv', default='hasil_ioc.csv',
                      help='File output CSV (default: hasil_ioc.csv)')
    parser.add_argument('--scan-file', help='File tambahan untuk scan kecocokan')
    
    args = parser.parse_args()
    
    if not Path(args.file_path).exists():
        logging.error(f"File tidak ditemukan: {args.file_path}")
        sys.exit(1)
    
    try:
        extractor = EkstraksiIOC()
        
        # Analisis file utama
        if not extractor.analisis_file(args.file_path):
            sys.exit(1)
        
        # Simpan hasil
        extractor.simpan_hasil(args.output_json, args.output_csv)
        
        # Tampilkan ringkasan
        print("\nRingkasan Ekstraksi IOC:")
        print("=" * 50)
        for jenis, nilai_set in extractor.hasil.items():
            print(f"{jenis.upper()}: {len(nilai_set)} ditemukan")
        
        # Scan file tambahan jika diminta
        if args.scan_file:
            if not Path(args.scan_file).exists():
                logging.error(f"File scan tidak ditemukan: {args.scan_file}")
                sys.exit(1)
            
            kecocokan = extractor.cari_kecocokan(args.scan_file)
            if kecocokan:
                print("\nKecocokan ditemukan di file scan:")
                print("=" * 50)
                for jenis, nilai_list in kecocokan.items():
                    if nilai_list:
                        print(f"\n{jenis.upper()}:")
                        for nilai in nilai_list:
                            print(f"  - {nilai}")
        
    except Exception as e:
        logging.error(f"Ekstraksi gagal: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 

#python ekstraksi_ioc.py /path/to/file --output-json hasil.json --output-csv hasil.csv
#python ekstraksi_ioc.py /path/to/file --scan-file /path/to/other/file